name: Build (Ubuntu)

on:
  push:
    branches:
      - ai-fsm-utility
    paths-ignore:
      - '**/README.md'

  pull_request:
    branches:
      - ai-fsm-utility

jobs:
  build-ubuntu:
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false

      matrix:
        build_type: ["Release"]
        cmake_generator: ["Ninja"]

        config:
        - {
            os: ubuntu-20.04,
            cc: "gcc",
            cxx: "g++"
          }
        - {
            os: ubuntu-20.04,
            cc: "clang",
            cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y \
          ninja-build \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev

    - name: Configure CMake
      run: >
        cmake
        -G ${{ matrix.cmake_generator }}
        -S ${{ github.workspace }}
        -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.config.cc }}
        -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_INSTALL_PREFIX=/usr

    - name: Build
      run: >
        cmake
        --build ${{ steps.strings.outputs.build-output-dir }}
        --config ${{ matrix.build_type }}

    - name: Download linuxdeploy
      run: |
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage

    - name: Generate AppImage
      run: |
        cp -r ${{ github.workspace }}/appimage-data/AppDir ${{ steps.strings.outputs.build-output-dir }}
        cmake \
        --install ${{ steps.strings.outputs.build-output-dir }} \
        --prefix ${{ steps.strings.outputs.build-output-dir }}/AppDir/usr
        rm -r ${{ steps.strings.outputs.build-output-dir }}/AppDir/usr/include
        mv ${{ steps.strings.outputs.build-output-dir }}/AppDir/usr/lib/x86_64-linux-gnu/libTimeUtils.so .
        LD_LIBRARY_PATH=. ./linuxdeploy-x86_64.AppImage --appimage-extract-and-run --appdir ${{ steps.strings.outputs.build-output-dir }}/AppDir --output appimage

    - name: Upload AppImage Artifact
      uses: actions/upload-artifact@v4
      with:
        name: 'Biplanes_Revival-x86_64-${{ matrix.config.cc }}.AppImage'
        path: 'Biplanes_Revival-x86_64.AppImage'
        if-no-files-found: error
        compression-level: 9

